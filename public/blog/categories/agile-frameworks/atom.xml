<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: agile frameworks | Adrian Mejia's [code]Blog]]></title>
  <link href="http://adrianmejia.com/blog/categories/agile-frameworks/atom.xml" rel="self"/>
  <link href="http://adrianmejia.com/"/>
  <updated>2013-02-02T14:18:33-05:00</updated>
  <id>http://adrianmejia.com/</id>
  <author>
    <name><![CDATA[Adrian Mejia]]></name>
    <email><![CDATA[me@adrianmejia.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backbone.js for absolute beginners - getting started (part 4: Routers)]]></title>
    <link href="http://adrianmejia.com/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-4/"/>
    <updated>2012-09-13T14:41:00-04:00</updated>
    <id>http://adrianmejia.com/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-4</id>
    <content type="html"><![CDATA[<p>The part 3 of this tutorial is <a href="/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3/">here</a>.</p>

<h2>2.6 Backbone.Router</h2>

<p>You could build web application without using the routers.  However, if you want to make reference to certain ‘state’ or location of the web application, you need a reference (link/URL) to it. This is where routers come to rescue.</p>

<p>Routing in most of JS application are achieved by hash-tags. E.g. If you take a look of Gmail URL you will see something like:</p>

<p><code>https://mail.google.com/mail/u/0/#inbox/139c0d48e11d986b</code></p>

<p>where the <code>#inbox/139c0d48e11d986b</code> is the hash-tag which reference some email location.</p>

<p>In backbone, routes are hash maps that match URL patterns to functions. You can use parameter parts, such as <code>todos/:id</code>, or using splats <code>file/*path</code> you will match all the parameters from the splat on. For that reason, the splat parameter should be always the last matcher.</p>

<h3>2.6.1 Initializing the Router</h3>

<p>In our Todo app, we are going to use routers to filter between the tasks that are pending and the ones that have been completed. So, let's initialize the routes this way:</p>

<p>{% codeblock Define Router  lang:js https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html Full Code %}</p>

<pre><code>app.Router = Backbone.Router.extend({
  routes: {
    '*filter' : 'setFilter'
  },
  setFilter: function(params) {
    console.log('app.router.params = ' + params); // just for didactical purposes.
    window.filter = params.trim() || '';
    app.todoList.trigger('reset');
  }
}); 
</code></pre>

<p>{% endcodeblock %}</p>

<p>Now, you need to initialize it, adding this lines:</p>

<p>{% codeblock Initialize router  lang:diff https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html Full Code %}</p>

<pre><code> //--------------
 // Initializers
 //--------------   
</code></pre>

<ul>
<li> app.router = new app.Router();</li>
<li> Backbone.history.start();  <br/>
 app.appView = new app.AppView();</li>
</ul>


<p>{% endcodeblock %}</p>

<p>You can test that you router is working just typing <code>#anything/that/you/want</code> and seeing the parameter in you browser's console.</p>

<h3>2.6.1 Processing the routes</h3>

<p>Before rendering the list of items, you need to check the parameters to wether show only the pending ones, or the completed or show them all. As shown in the code snipet below.</p>

<p>{% codeblock Processing the routes in app.AppView  lang:diff https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html Full Code %}</p>

<p>@@ -164,7 +177,18 @@</p>

<pre><code>   },
   addAll: function(){
     this.$('#todo-list').html(''); // clean the todo list
</code></pre>

<ul>
<li><pre><code> app.todoList.each(this.addOne, this);
</code></pre></li>
<li><pre><code> // filter todo item list
</code></pre></li>
<li><pre><code> switch(window.filter){
</code></pre></li>
<li><pre><code>   case 'pending':
</code></pre></li>
<li><pre><code>     _.each(app.todoList.remaining(), this.addOne);
</code></pre></li>
<li><pre><code>     break;
</code></pre></li>
<li><pre><code>   case 'completed':
</code></pre></li>
<li><pre><code>     _.each(app.todoList.completed(), this.addOne);
</code></pre></li>
<li><pre><code>     break;            
</code></pre></li>
<li><pre><code>   default:
</code></pre></li>
<li><pre><code>     app.todoList.each(this.addOne, this);
</code></pre></li>
<li><pre><code>     break;
</code></pre></li>
<li><pre><code> }
</code></pre>

   },
   newAttributes: function(){

<pre><code> return {
</code></pre></li>
</ul>


<p>{% endcodeblock %}</p>

<p>If you try adding the words <code>#/pending</code> or <code>#/completed</code> at the end of the URL you'll get an error!. That's a good sign, it means the routes are working, but we haven't implemented the <code>app.todoList.remaining()</code> and <code>app.todoList.completed()</code>. So, that's next:</p>

<p>{% codeblock Defining 'completed' and 'remaining' functions in app.TodoList  lang:diff https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html Full Code %}</p>

<p>@@ -85,7 +90,15 @@</p>

<pre><code> //--------------
 app.TodoList = Backbone.Collection.extend({
   model: app.Todo,
</code></pre>

<ul>
<li>   localStorage: new Store("backbone-todo")</li>
<li>   localStorage: new Store("backbone-todo"),</li>
<li>   completed: function() {</li>
<li><pre><code> return this.filter(function( todo ) {
</code></pre></li>
<li><pre><code>   return todo.get('completed');
</code></pre></li>
<li><pre><code> });
</code></pre></li>
<li>   },</li>
<li>   remaining: function() {</li>
<li><pre><code> return this.without.apply( this, this.completed() );
</code></pre></li>
<li>   }    <br/>
 });</li>
</ul>


<p>{% endcodeblock %}</p>

<p>Now, if you try again adding the hash-tags it will work! But, it will be better if the user can have links to that instead of typing URLs. So, let's add them.</p>

<p>{% codeblock Show routes' links  lang:diff https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html Full Code %}</p>

<p>@@ -32,6 +32,11 @@</p>

<pre><code> &lt;header id="header"&gt;
   &lt;h1&gt;Todos&lt;/h1&gt;
   &lt;input id="new-todo" placeholder="What needs to be done?" autofocus&gt;
</code></pre>

<ul>
<li>   <div></li>
<li><pre><code> &lt;a href="#/"&gt;show all&lt;/a&gt; |
</code></pre></li>
<li><pre><code> &lt;a href="#/pending"&gt;show pending&lt;/a&gt; |
</code></pre></li>
<li><pre><code> &lt;a href="#/completed"&gt;show completed&lt;/a&gt;
</code></pre></li>
<li>   </div>    <br/>
 </header>
 <section id="main">
   <ul id="todo-list"></ul></li>
</ul>


<p>{% endcodeblock %}</p>

<p>Well, that's all! If completed these 4 parts tutorial you will be familiar with the main Backbone modules (Models, Collections, Views, Events, and Routes). To increase you knowledge you can follow the following resources:</p>

<ul>
<li><a href="http://addyosmani.github.com/backbone-fundamentals/?utm_source=adrianmejia.com">Developing Backbone.js Applications</a></li>
<li><a href="http://backbonejs.org/?utm_source=adrianmejia.com">Official documentation</a></li>
<li><a href="https://github.com/documentcloud/backbone/blob/master/backbone.js">Source code - it's the ultimate source of true</a></li>
</ul>


<p>Hope it was helpful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.js for absolute beginners - getting started (part 3: CRUD)]]></title>
    <link href="http://adrianmejia.com/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3/"/>
    <updated>2012-09-13T01:37:00-04:00</updated>
    <id>http://adrianmejia.com/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3</id>
    <content type="html"><![CDATA[<p>The part 2 of this tutorial is <a href="/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2/">here</a>.</p>

<h2>2.5 Todo item list CRUD</h2>

<p>We basically have our working but there are a couple of features that could improve it. Let’s implement the CRUD (Create-Read-Update-Delete) for the item list.</p>

<h3>2.5.1. C-reate</h3>

<p>We are already can create item list from the console (2.3) and also from the UI (2.4.3). So, it’s done.</p>

<h3>2.5.2. U-pdate</h3>

<p>What if you make a mistake and want to change the text on some of your to-do list. Furthermore, you can notice that the checkboxes states are not persistent when you reload the pages. Let’s fix both problems.</p>

<p>1.- You want to respond to a double click event showing up a text box, where the user can change the text. First, let’s add the HTML in the <code>item-template</code> template below the label tag.</p>

<p><code>&lt;input class="edit" value="&lt;%- title %&gt;"&gt;</code></p>

<p>2.- If you refresh, you will notice that there are both displaying at the same time. So, you can hide them properly with the following CSS.
{% codeblock CSS lang:css https://raw.github.com/amejiarosario/Backbone-tutorial/3840dc802d6f311528298639150a5f52364c1975/backbone-tutorial.html Full Code %}</p>

<pre><code>#todo-list input.edit {
  display: none; /* Hides input box*/
}
#todo-list .editing label {
  display: none; /* Hides label text when .editing*/
}    
#todo-list .editing input.edit {
  display: inline; /* Shows input text box when .editing*/
}
</code></pre>

<p>{% endcodeblock %}</p>

<p>3.- Then, we need to add the events to the TodoView class to respond to the changes.</p>

<p>{% codeblock Todo Model lang:js https://raw.github.com/amejiarosario/Backbone-tutorial/3840dc802d6f311528298639150a5f52364c1975/backbone-tutorial.html Full Code %}</p>

<pre><code>// renders individual todo items list (li)
app.TodoView = Backbone.View.extend({
  tagName: 'li',
  template: _.template($('#item-template').html()),
  render: function(){
    this.$el.html(this.template(this.model.toJSON()));
    this.input = this.$('.edit');
    return this; // enable chained calls
  },
  initialize: function(){
    this.model.on('change', this.render, this);
  },      
  events: {
    'dblclick label' : 'edit',
    'keypress .edit' : 'updateOnEnter',
    'blur .edit' : 'close'
  },
  edit: function(){
    this.$el.addClass('editing');
    this.input.focus();
  },
  close: function(){
    var value = this.input.val().trim();
    if(value) {
      this.model.save({title: value});
    }
    this.$el.removeClass('editing');
  },
  updateOnEnter: function(e){
    if(e.which == 13){
      this.close();
    }
   }            
});
</code></pre>

<p>{% endcodeblock %}</p>

<p>You can find the <a href="https://github.com/amejiarosario/Backbone-tutorial/commit/3840dc802d6f311528298639150a5f52364c1975">diff</a> that were added to implement the update feature.</p>

<p><a href="https://github.com/amejiarosario/Backbone-tutorial/commit/19fa69e654ae5d370385675e4ffed615532b9934">Here</a> are the changes to fix the update for the checkboxes.</p>

<h3>2.5.2. D-elete</h3>

<p>To be able to remove to-do items, we need to add a remove button in each item and listen to the click event on it, which will trigger the destroy function in the selected todo object.</p>

<p>1.- Add the HTML markup for the remove button.</p>

<p>{% codeblock Remove Button into 'item template'  lang:diff https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html Full Code %}</p>

<p>@@ -47,6 +47,7 @@</p>

<pre><code>   &lt;input class="toggle" type="checkbox" &lt;%= completed ? 'checked' : '' %&gt;&gt;
   &lt;label&gt;&lt;%- title %&gt;&lt;/label&gt;
   &lt;input class="edit" value="&lt;%- title %&gt;"&gt;
</code></pre>

<ul>
<li>   <button class="destroy">remove</button>
 </div>
</script></li>
</ul>


<p>{% endcodeblock %}</p>

<p>2.- Listen for the click event in the button that you just created.</p>

<p>{% codeblock Add event listeners for the Remove Button in 'app.TodoView'  lang:diff https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html Full Code %}</p>

<p>@@ -105,12 +106,14 @@</p>

<pre><code>   },
   initialize: function(){
     this.model.on('change', this.render, this);
</code></pre>

<ul>
<li><pre><code> this.model.on('destroy', this.remove, this); // remove: Convenience Backbone'
</code></pre>

   },    <br/>
   events: {

<pre><code> 'dblclick label' : 'edit',
 'keypress .edit' : 'updateOnEnter',
 'blur .edit' : 'close',
</code></pre></li>
<li><pre><code> 'click .toggle': 'toggleCompleted'
</code></pre></li>
<li><pre><code> 'click .toggle': 'toggleCompleted',
</code></pre></li>
<li><pre><code> 'click .destroy': 'destroy'
</code></pre>

   },
   edit: function(){

<pre><code> this.$el.addClass('editing');
</code></pre></li>
</ul>


<p>{% endcodeblock %}</p>

<p>3.- Add the destroy method to the TodoView.</p>

<p>{% codeblock Add the destroy method to 'app.TodoView'  lang:diff https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html Full Code %}</p>

<p>@@ -130,7 +133,10 @@</p>

<pre><code>   },
   toggleCompleted: function(){
     this.model.toggle();
</code></pre>

<ul>
<li>   }</li>
<li>   },</li>
<li>   destroy: function(){</li>
<li><pre><code> this.model.destroy();
</code></pre></li>
<li>   }    <br/>
 });</li>
</ul>


<p>{% endcodeblock %}</p>

<p>You can download the full working code so far in <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html">here</a> and you can visualize the changes needed to implement the delete feature in <a href="https://github.com/amejiarosario/Backbone-tutorial/commit/1267e531ae3ef508eb32e5308c2cc965f02d1b45">here</a></p>

<h3>Continue with the <a href="/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-4/">4th part</a> and learn about Backbone's Routes!</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.js for absolute beginners - getting started (part 2: Models, Collections and Views)]]></title>
    <link href="http://adrianmejia.com/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2/"/>
    <updated>2012-09-13T00:08:00-04:00</updated>
    <id>http://adrianmejia.com/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2</id>
    <content type="html"><![CDATA[<p>The part 1 of this tutorial is <a href="/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/">here</a></p>

<h2>2. Todo App in Backbone (Models, Collections, View and Events)</h2>

<p>After completing this example app, you will have experience and basic understanding of all the modules of Backbone.</p>

<h3>2.1.- Todo app Boiler plate</h3>

<p>Let's start again with the initial file used on 1.1. And then add the following HTML code to add the structure.</p>

<p>{% codeblock HTML Structure lang:html https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html Full Code %}</p>

<p>  <section id="todoapp"></p>

<pre><code>&lt;header id="header"&gt;
  &lt;h1&gt;Todos&lt;/h1&gt;
  &lt;input id="new-todo" placeholder="What needs to be done?"&gt;
&lt;/header&gt;
&lt;section id="main"&gt;
  &lt;ul id="todo-list"&gt;&lt;/ul&gt;
&lt;/section&gt;
</code></pre>

<p>  </section></p>

<p>{% endcodeblock %}</p>

<p>We are going to implement a To-do list, which is basically un-ordered list (ul) of elements with checkboxes.</p>

<h3>2.2.- Backbone.Model</h3>

<p>Models are the heart of every application. It contains the interactive data and the logic surrounding it, such as data validation, getters and setters, default values, data initialization, conversions and so on.
For our example, we are going to create a model called <code>Todo</code>, which will store a string of text (title) and whether the task has been completed or not.</p>

<p>{% codeblock Todo Model lang:js https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html Full Code %}</p>

<pre><code>var app = {}; // create namespace for our app

app.Todo = Backbone.Model.extend({
  defaults: {
    title: '',
    completed: false
  }
});
</code></pre>

<p>{% endcodeblock %}</p>

<p>Notice, that for convention classes names are capitalize, while instance variables and objects are not. Another important aspect of models it’s that their properties are dynamic; they can be created on the fly and doesn’t have any specific type associated.</p>

<p><strong>Test what you just your coded!</strong></p>

<p>After you completed the code snippet above you can open your browser console and try this out, to get familiar with the models:</p>

<p>{% codeblock Practice in your Browser\'s console  lang:js %}
var todo = new app.Todo({title: 'Learn Backbone.js', completed: false}); // create object with the attributes specified.
todo.get('title'); // "Learn Backbone.js"
todo.get('completed'); // false
todo.get('created_at'); // undefined
todo.set('created_at', Date());
todo.get('created_at'); // "Wed Sep 12 2012 12:51:17 GMT-0400 (EDT)"
{% endcodeblock %}</p>

<h3>2.3.- Backbone.Collection</h3>

<p>As its name indicates, collections are ordered sets of models, where you can get and set models in the collection, listen for events when any element in the collection changes, and fetching for model’s data from the server.</p>

<p>Models are allows linked to data persisted in some form (database, file, memory), so it requires a reference to it. Therefore, you need to specify the <code>url</code> parameter with a relative url, where the model’s resource would be located on the server. Otherwise, you will get errors like:</p>

<p><code>A "url" property or function must be specified</code></p>

<p>We are not going to use a backend server for simplicity; instead we are going to use HTML5’s local storage for persistence through a Backbone’s plugin. So, we need to define the localStorage property instead of URL.</p>

<p>{% codeblock Todo list Collection lang:js https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html Full Code %}</p>

<pre><code>app.TodoList = Backbone.Collection.extend({
  model: app.Todo,
  localStorage: new Store("backbone-todo")
});

// instance of the Collection
app.todoList = new app.TodoList();
</code></pre>

<p>{% endcodeblock %}</p>

<p><strong>Test what you just your coded!</strong></p>

<p>{% codeblock Practice in your Browser\'s console  lang:js %}
var todoList = new app.TodoList()
todoList.create({title: 'Learn Backbone\'s Collection'}); // notice: that <code>completed</code> will be set to false by default.
var lmodel = new app.Todo({title: 'Learn Models', completed: true});
todoList.add(lmodel); // ["Learn Backbone's Collection", "Learn Models"]
todoList.pluck('title'); // [false, true]
JSON.stringify(todoList); // "[{"title":"Learn Backbone's Collection","completed":false,"id":"d9763e99-2267-75f5-62c3-9d7e40742aa6"},{"title":"Learn Models","completed":true}]"
{% endcodeblock %}</p>

<h2>2.4.- Backbone.View</h2>

<p>As mentioned in 1.2, Views doesn’t have the view or markup for our application, but rather put together data with templates to finally render a view based on events or data changes.</p>

<h3>2.4.1.- Basic Properties</h3>

<p>There are 4 basic properties in a view: el, initialize, render, and events.</p>

<h3>2.4.1.1.- <code>view.el</code></h3>

<p>Every view needs to reference a DOM at all times. Therefore, the view will inject content into this element. This is the <code>el</code> property. <code>this.el</code> is created from view’s <code>el</code>,<code>tagName</code>, <code>className</code>, <code>id</code> or <code>attributes</code> properties. If none of these are specified, then this.el is an empty <code>div</code>. The <code>view.$el</code> it’s a cached jQuery object of the view’s element (view.el).</p>

<h3>2.4.1.2.- Initialize/construtor</h3>

<p>Here you have the option to pass parameters that will be attached to a model, collection or view.el.</p>

<h3>2.4.1.3.- <code>render</code></h3>

<p>In this function, you inject the markup into the elements. Not all views require having a render function, as you are going to see in the sample code, they can call other view’s render functions.</p>

<h3>2.4.1.5.- delegated events</h3>

<p>Events are written in the <code>{"event selector": "callback"}</code> format.</p>

<h2>2.4.2.- Todo View</h2>

<p>Now back, to our To-do application. We need a view that renders each of the todo model objects into the page.</p>

<p>{% codeblock Todo View lang:js https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html Full Code %}</p>

<pre><code>// renders individual todo items list (li)
app.TodoView = Backbone.View.extend({
  tagName: 'li',
  template: _.template($('#item-template').html()),
  render: function(){
    this.$el.html(this.template(this.model.toJSON()));
    return this; // enable chained calls
  }
});
</code></pre>

<p>{% endcodeblock %}</p>

<h2>2.4.3.- App View</h2>

<p>The <code>item-template</code> and <code>app.TodoView</code> will render one todo item. Now, we need another view that take a collection and render each of the individual items. We are going to call it ‘AppView’. Take a look through this code and try to identify each of the elements (we have already describe them in the previous sections).</p>

<p>{% codeblock item-template lang:html https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html Full Code %}</p>

<pre><code>  &lt;script type="text/template" id="item-template"&gt;
    &lt;div class="view"&gt;
      &lt;input class="toggle" type="checkbox"&gt;
      &lt;label&gt;&lt;%- title %&gt;&lt;/label&gt;
    &lt;/div&gt;
  &lt;/script&gt;
</code></pre>

<p>{% endcodeblock%}</p>

<p>{% codeblock Todo View lang:js https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html Full Code %}</p>

<pre><code>// renders the full list of todo items calling TodoView for each one.
app.AppView = Backbone.View.extend({
  el: '#todoapp',
  initialize: function () {
    this.input = this.$('#new-todo');
    app.todoList.on('add', this.addAll, this);
    app.todoList.on('reset', this.addAll, this);
    app.todoList.fetch(); // Loads list from local storage
  },
  events: {
    'keypress #new-todo': 'createTodoOnEnter'
  },
  createTodoOnEnter: function(e){
    if ( e.which !== 13 || !this.input.val().trim() ) { // ENTER_KEY = 13
      return;
    }
    app.todoList.create(this.newAttributes());
    this.input.val(''); // clean input box
  },
  addOne: function(todo){
    var view = new app.TodoView({model: todo});
    $('#todo-list').append(view.render().el);
  },
  addAll: function(){
    this.$('#todo-list').html(''); // clean the todo list
    app.todoList.each(this.addOne, this);
  },
  newAttributes: function(){
    return {
      title: this.input.val().trim(),
      completed: false
    }
  }
});

//--------------
// Initializers
//--------------   

app.appView = new app.AppView();     
</code></pre>

<p>{% endcodeblock %}</p>

<h3>Continue with the <a href="/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3/">3rd part</a> and learn how to make CRUD for your models!</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.js for Absolute Beginners - Getting started (Part 1: Intro)]]></title>
    <link href="http://adrianmejia.com/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/"/>
    <updated>2012-09-11T22:50:00-04:00</updated>
    <id>http://adrianmejia.com/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started</id>
    <content type="html"><![CDATA[<p>Backbone.js is a JavaScript framework, among many others, that is gaining special attention in the web development community because it's ease of use and the structure that it provides to JavaScript applications.</p>

<p>(Revised: 2013-02-02)</p>

<h3>Brief Background (optional reading)</h3>

<p><a href="#start">TL; DR</a>: You need to use JavaScript heavily in order to make responsive and interactive web applications. <a href="#start">Jump to this and get started.</a></p>

<p>The web application development process has been evolving over the years. In its beginning… the they were just static HTML pages, which required programmers change the code (HTML, CSS, JS) to change the content. Later, in web 2.0, server side programming languages (like PHP, Ruby, Java, …) were added to generate HTML pages dynamically based on user inputs and data stored in database. That was huge improvement, and most of the pages served today use this approach. However, to provide even more responsiveness of the website, speed and enhance the user interaction, it requiress to bring the logic closer to the client (browser).  There are a couple of languages that can run in the browsers besides JS, such as Java, Flash and others. However, these ones require extra plugins and are not universally accepted as JavaScript.</p>

<p>Therefore, web apps nowadays require heavy use of JavaScript to generate content on the fly and quickly. The user can’t wait between request. A lot of the logic/code that used to be in the server side is being moved to the client side. JS allows the web sites to render only the parts of the website that changed and not the full-page on every request. Examples of this kind of web apps are Gmail, Pandora, Pinterest, Nokia Maps 3D and others.</p>

<p>A common problem with large JS web apps developed is that it became pretty messy really quick. The lacks of structure it’s hard to maintain. This is where Backbone comes into play. It provides structure to organize the code and increase maintainability. Backbone is not the only one; in fact, there are many JS frameworks that accomplish similar results like Ember.js, Angular.js and so on. However, I choose Backbone because is one of the most widely spread framework in its category. It has a vibrant community and it’s also being fully used in production for a considerable number of big companies like: Wal-Mart mobile, Groupon, Khan Academy, Pandora, Wordpress, Foursquare, and so on.</p>

<p><a id="start"></a></p>

<h2>Just enough to get started with Backbone.js</h2>

<p>Backbone.js has hard dependency on underscore.js and a soft dependency on jQuery. It’s composed by the following modules:</p>

<ul>
<li> Views</li>
<li> Events</li>
<li> Models</li>
<li> Collections</li>
<li> Routers</li>
</ul>


<h2>Shut up and show me the code!</h2>

<p>Alright! the way we are going to explore all of these modules it’s through examples. This is a practical tutorial that I wished I had it when I stared learning. So, this is a fat-free walkthrough Backbone.js, as simple as it could be, all the code is in one file just for didactical purposes (no hidden magic tricks, all cards are on the board).</p>

<p>The first example is a ‘Hello World’ app in Backbone and the second it’s a Todo App. After doing these 2 apps, you’ll see in action every Backbone module and have practical understanding about them.</p>

<h2>1. Hello World in Backbone.js</h2>

<p>You can follow alone this tutorial's code in this <a href="https://github.com/amejiarosario/Backbone-tutorial/commits/">repository</a>. Each feature implemented it’s a new commit, so you can easily see what changed in every step.</p>

<p><strong>1.1.- Simple HTML5 and Backbone boilerplate</strong></p>

<p>To get started download <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/9821e5b1fdc39d22720b1a1d89055cc531f994d7/backbone-tutorial.html">this simple html file</a>. This file  contains the libraries that you'll need (jQuery, Underscore.js, Backbone.js and Backbone-localStorage.js) and the placeholders for your HTML and JS code. Don't worry about the libraries we are going to explain them, as we need them.</p>

<p>After downloading the <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/9821e5b1fdc39d22720b1a1d89055cc531f994d7/backbone-tutorial.html">file</a>, notice the HTML where all your page will be built using Backbone.Views!</p>

<p>All your js app will be loaded here:</p>

<p><code>&lt;div id="container"&gt;Loading...&lt;/div&gt;</code></p>

<p><strong>1.2.- Backbone's Views</strong></p>

<p>Backbone's Views are the equivalent of ‘controllers’ on MVC frameworks (like Ruby on Rails), if you are not familiar with MVC frameworks nevermind. Backbone's Views glues together user events (clicks, pressed keys …), render HTML views and templates, and interacts with models which contains the data of the application.</p>

<p>Here is an example of a Backbone.view: READ the code and COMMENTS, then insert this code in the javascript block in the HTML file that you downloaded.</p>

<p>{% codeblock Simple Backbone.View lang:js https://raw.github.com/amejiarosario/Backbone-tutorial/0bf69185f4463a75cb2d5553f8d1ea197323ccff/backbone-tutorial.html Full Code %}</p>

<pre><code>var AppView = Backbone.View.extend({
  // el - stands for element. Every view has a element associate in with HTML content will be rendered.
  el: '#container',
  // It's the first function called when this view it's instantiated.
  initialize: function(){
    this.render();
  },
  // $el - it's a cached jQuery object (el), in which you can use jQuery functions to push content. Like the Hello World in this case.
  render: function(){
    this.$el.html("Hello World");
  }
});
</code></pre>

<p>{% endcodeblock %}</p>

<p><strong>1.3.- Test the app</strong></p>

<p>After copying the code, open the file, refresh the browser and you should see the 'Hello World' message… right? Wait, if you just seeing just 'Loading…' it's because you need to initialize the view first.</p>

<p><code>var appView = new AppView();</code></p>

<p>Yay! you have your Hello Wold in Backbone and intro to the View module. (Full code it's <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/0bf69185f4463a75cb2d5553f8d1ea197323ccff/backbone-tutorial.html">here</a>)</p>

<p><strong>1.4.- Backbone's Templates</strong></p>

<p>Backbones has a utility/helper library called <a href="http://underscorejs.org/?utm_source=adrianmejia.com">underscore.js</a> and you can use their template solution out-of-the-box, but you can use any other template solution that you want like <a href="https://github.com/janl/mustache.js">mustage</a> or <a href="https://github.com/wycats/handlebars.js">handlerbars</a>. Let's stick with _.js's template for simplicity sake.</p>

<p>Underscore.js template has the following signature:</p>

<p><code>_.template(templateString, [data], [settings])</code></p>

<p>where in the <code>templateString</code> you use the place holder <code>&lt;%= %&gt;</code> and <code>&lt;%- %&gt;</code> to substitute them with data. The later does HTML escape while the first one doesn't. Moreover, you can use <code>&lt;% %&gt;</code> to run any javascript code.</p>

<p>Let’s see it in action and rewrite our Hello World using template instead.</p>

<p>{% codeblock Simple Backbone.View and Templates lang:js https://raw.github.com/amejiarosario/Backbone-tutorial/c5b131278ecde92f33882c9a2c22ee4119e57d77/backbone-tutorial.html Full Code %}</p>

<pre><code>var AppView = Backbone.View.extend({
  el: $('#container'),
  // template which has the placeholder 'who' to be substitute later 
  template: _.template("&lt;h3&gt;Hello &lt;%= who %&gt;&lt;h3&gt;"),
  initialize: function(){
    this.render();
  },
  render: function(){
    // render the function using substituting the varible 'who' for 'world!'. 
    this.$el.html(this.template({who: 'world!'}));
    //***Try putting your name instead of world.
  }
});

var appView = new AppView();
</code></pre>

<p>{% endcodeblock %}</p>

<p>Run the app again and verify that it's working with the template.</p>

<h3>Continue with the <a href="/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2/">2nd part</a> and learn more about backbones' Models, Collections, View and Events!</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Architectural Design]]></title>
    <link href="http://adrianmejia.com/blog/2011/08/11/ruby-on-rails-architectural-design/"/>
    <updated>2011-08-11T00:00:00-04:00</updated>
    <id>http://adrianmejia.com/blog/2011/08/11/ruby-on-rails-architectural-design</id>
    <content type="html"><![CDATA[<p>1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Introduction</p>


<p>Ruby on Rails (RoR) is open source web framework written in the Ruby programming language, and all the applications in Rails are written in Ruby. Ruby on Rails is focused on productivity and enforces agile web development.</p>


<p>Rails framework leverages the features of the Ruby language. Yukishiro Matzumoto designed this language in 1995 influence by Perl, Eiffel, Python, Smalltalk and others. It’s a dynamically typed, fully object-oriented, general-purpose scripting language. Ruby was designed to have an elegant syntax and made as human readable as possible, for instance it does not need colons and parenthesis around parameters. Some parts of the code are read like English declarations.</p>


<p>The Ruby on Rails framework was designed for database-backed web applications. It was created as a response to heavy web frameworks such as J2EE and the .NET framework. In order to make the development process faster, Ruby on Rails uses conventions and assumptions that are considered best ways to accomplish tasks, and it’s designed to encourage those. This convention eliminates configuration code and increases productivity. Many of the common tasks for web development are built-in in the framework to work out-of-the-box. This includes email management, object-database mappers, file structures, code generation, how the elements are named and organized and so on. All of these conventions allow developers to write less code and develop agile applications. Additionally, the enhance maintainability and understandability around the Ruby on Rails developers’ community.</p>


<p>Ruby on Rails architecture has the following features:</p>


<ul>
    <li>Model-View-Controller architecture.</li>
    <li>Representational State Transfer (REST) for web services.</li>
    <li>Supports the major databases (MySQL, Oracle, MS SQL Server, PostgreSQL, IBM DB2, and more).</li>
    <li>Open-source server side scripting language.</li>
    <li>Convention over configuration</li>
    <li>Scripts generators to automate tasks.</li>
    <li>Use of YAML machine, which is a human-readable data serialization format.</li>
</ul>


<p>The above-described features are distributed in the following Rails’ components and the Fig. 2 shows the interaction between some of these components:</p>


<ul>
    <li>Action Mailer</li>
    <li>Action Pack
        <ul style="list-style-type:circle;">
            <li>Action Controller</li>
            <li>Action Dispatcher</li>
            <li>Action View</li>
        </ul>
    </li>
    <li>Active Model</li>
    <li>Active Record</li>
    <li>Active Resource</li>
    <li>Active Support</li>
    <li>Railties</li>
</ul>


<p>&nbsp;</p>


<p><img alt="Ruby on Rails Architecture Diagram" src="https://lh4.googleusercontent.com/-qUDi3Wiv6A0/RwGSHOH-OWI/AAAAAAAAAEI/_WrLZZLVsR0/s640/Rails2.png" style="width: 640px; height: 483px; "></p>


<p><strong>Figure 2. Reference model depicting the overall framework architecture [<a href="https://picasaweb.google.com/Dikiwinky/Ruby#5116531304417868130">source</a>]</strong></p>


<h2>1.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Model-View-Controller Pattern</h2>


<p>Ruby on Rails uses the Model-View-Controller (MVC) architectural pattern in order to improve the maintainability of the application. The Model centralizes the business logic, the View manages the display logic, while the Controller deals with the application flow. The MVC allows a clean separation of concerns, in the way that it keeps the business logic separated from HTML views. Additionally, it improves decoupling and testing.</p>


<h3>1.1.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Model</h3>


<p>The Model layer carries the business logic of the application and the rules to manipulate the data. In Ruby on Rails, the models are used to manage the interaction with their corresponding elements in the database. The Models represent the information in the database and do the appropriate validations.</p>


<h3>1.1.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; View</h3>


<p>The view is the front-end of the application, representing the user interface. In Ruby on Rails, views are HTML files with embedded Ruby code. The embedded Ruby code in the HTMLs is fairly simple (loops and conditionals). It is only used to display data to the user in the form of views. Views are used to provide the data to the browsers that requested the web pages. Views can server content in several formats, such as HTML, PDF, XML, RSS and more.</p>


<h3>1.1.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Controller</h3>


<p>Controllers interact with models and views. The incoming requests from the browsers are processed by the controllers, which process the data from the models and pass it to the views for presentation.</p>


<p>&nbsp;</p>


<h2>1.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Rails Modules</h2>


<h3>1.2.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Action Mailer</h3>


<p>This module is responsible for providing e-mail services. It processes incoming mails and creates new ones. This module can handle simple text or complex rich-format emails. Also it has common tasks built-in, such as, sending out forgotten passwords, welcome messages, and fulfilling any other written-communication’s need. Action Mailer is wrapped around the Action Controller. It provides ways to make email with templates in the same way that Action View uses it to render web pages.</p>


<h3>1.2.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Action Pack</h3>


<p>The Action Pack module provides the controller and view layers of the MVC patterns. These modules capture the user requests made by the browser and map these requests to actions. These actions are defined in the controllers layer and later the actions render a view that is displayed in the browser. Action Pack is divided in 3 sub-modules, which are: Action Dispatch, Action Controller, and Action View.</p>


<ul>
    <li><strong>Action Dispatch:</strong> handles routing of web browser request. It parses the web request and does advanced processing around HTTP, such as handling cookies, sessions, request methods, and so forth.</li>
    <li><strong>Action Controller:</strong> after the action dispatch has processed the request it makes the routing to its corresponding controller. This module provides a base controller from which all the other controllers can inherit. Action Controller contains actions to controls model and view. This module makes data available as needed, controls views rendering and redirection. Additionally, it manages the user sessions, application flow, caching features, helper modules and implement filters for the pre, during and post processing hooks.</li>
    <li><strong>Action View:</strong> it is call by the Action Controller. It renders the presentation of the web page requested. Action View provides master layouts, templates lookups and view helpers that assist the generation of the HTML, feeds and other presentation formats. There are three templates schemas in Rails, which are rhtml, rxml, and rjs. The rhtml format generates HTML views to the users with ERB (embedded ruby code in HTML). The rxml is used to construct XML documents using Ruby, and rjs allow creating dynamic JavaScript code in Ruby useful to implement AJAX functionality.</li>
</ul>


<h3>1.2.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Active Model</h3>


<p>Define the interface between the Action Pack and the Active Record modules. Also, Action Record interfaces can be used outside of Rails framework to provide Object-relational mapping (ORM) functionalities.</p>


<h3>1.2.4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Active Record</h3>


<p>Active record is an architectural pattern used to manage data in relational databases through objects. In Ruby on Rails the Active Record module provides object-relational mapping to classes. This module builds the Model layer that connects the database tables with its representation in ruby classes. Rails provide tools to implement the CRUD functionality with zero-configuration. CRUD allows creating, reading, updating and deleting records from the database through ruby objects. An object represents each row in a database tables. Additionally, it also provides advance search capabilities and the ability to create relationships or associations between models. Active Records relies heavily on conventions on how the classes should be named, the tables in the database, the foreign keys and primary keys. However, the database mapping can be accomplished using configuration, but it is highly encouraged to follow the rails convention, such as active record modules.</p>


<p>This modules is used to create model classes, which contains the business logic, handle validations and relationships, automatically maps to a table and encapsulates data access, provides getters and setters, callbacks and also supports several databases.</p>


<h3>1.2.5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Active Resource</h3>


<p>Active Resource module is used for managing the connection between RESTful web services and business objects. It follows the same principle of Active Record that is to reduce the amount of code needed to map resources. Active Resources maps model classes to remote REST resources in the same way that Active Record maps model classes to database tables. Active Resource leverages the HTTP protocol and adds code conventions to make it easy to infer complex structures and relations. Active Record also provides proxy capabilities between an Active Resource (client) and a RESTful service. This is accomplished implementing an object-relational mapping for REST web services. When a request to a remote resource is made, a REST XML is generated and transmitted, and then the result is parsed into a ruby object.</p>


<p>1.2.6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RESTful Architecture</p>


<p>REST stands for Representational State Transfer. REST is an alternative to web services, such as SOAP and WSDL. It relies in the HTTP protocol for all the CRUD operations: create, read, update and delete. RESTful web services are appropriated when the web services are completely stateless, limited bandwidth (it’s very useful for mobile devices since it doesn’t the the overhead of other protocols like SOAP), when the data is not generated dynamically so it could be cached to improve performance and when there is a mutual understanding between the service producer and the consumer.</p>


<h3>1.2.7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Active Support</h3>


<p>It is a collection of utility classes and standard Ruby libraries extensions that are useful for the development on Ruby on Rails. It includes a rich support for multi-bytes strings, internationalization, time zones and testing.</p>


<h3>1.2.8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Railties</h3>


<p>Railties is the Rails’ core code that builds new applications. It is responsible for “glue”-ing all the above-describe modules all together. Additionally, it handles all the bootstrapping process, the command line interface and provides the Rails’ code generators. Rake is one of the command lines used to perform database tasks, deployment, documentation, testing and cleanups. Rails also supply a built-in testing framework that generates test stubs automatically when code is generated, provides unit testing, functional testing for views and controls, test fixtures and supply test data using YAML.</p>


<p>&nbsp;</p>


<h1>2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Architectural Solution</h1>


<p>The selected views to analyze this architecture are Module Views and Component and Connector (C&amp;C) Views. The Module View will contain UML diagrams which represent a static view of all the components, while the Component &amp; Connector View will show the UML diagram that presents a run-time view of a system's architecture: what components exist at run-time and how do these components communicate with one another.</p>


<p>2.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connect and Component View</p>


<p>The Component-and-Connector View is a dynamic view of the system and presents the components, interfaces, connectors and systems. In the interfaces representation we choose to present the Interfaces as UML interfaces. This provides a compact representation of the interfaces and avoids crowding the diagram. The connector types will be represented as associations and connector instances as links to be the consistent with the UML notation that we are using the for the interfaces representation. In the same way the systems will be presented as UML subsystems. Fig. 3</p>


<h2><img alt="Ruby on Rails component view diagram" src="http://www.adrianmejiarosario.com/sites/default/files/pictures/ror-component-view.JPG" style="width: 696px; height: 495px; "></h2>


<p><strong>Figure 3. &nbsp;Dynamic View: Ruby on Rails Connector and Component View</strong></p>


<h2>2.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Modules View</h2>


<p>The Module View shows the code or implementation as modules and presents the interfaces and their relations between each other. The Module View contains the following: modules, interfaces, aggregations, generalizations and dependencies. These views are an appropriate way to show a static view of the architecture. Fig. 4</p>


<p align="left"><img alt="Ruby on Rails static view diagram" src="http://www.adrianmejiarosario.com/sites/default/files/pictures/ror-statict-view.JPG" style="width: 873px; height: 561px; "></p>


<p><strong>Figure 4. Static View: Ruby on Rails Module View</strong></p>


<p>&nbsp;</p>


<p>The Module View shows the code or implementation as modules and presents the interfaces and their relations between each other. The Module View contains the following: modules, interfaces, aggregations, generalizations and relationships. This view is appropriate way to show static view of the architecture.</p>


<p>&nbsp;</p>


<h1>3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pitfalls of the Ruby on Rails Architecture</h1>


<p>Since Rails is built on the Ruby language it inherits the goodness and weakness of that language. Ruby is a dynamic scripting language with an elegant syntax and fully object-oriented. Because it is an interpreted language it is slower than other languages that are compiled like Java or C++. In most cases, this difference in speed is not a problem but when the web application needs to scale to millions of concurrent users this performance starts to degrade. The Ruby language is not suited for high concurrency applications, because it is not optimized for speed computing. It was designed to be elegant, simply and for rapid development. Ruby doesn’t have good thread support yet and, like many other scripting languages, Ruby has trouble dealing with long-lived processes. But other languages, like Java, are really good at that because they have been optimized for year to handle threads efficiently. Another weakness is the Ruby’s garbage collector is not as good as Java’s in that each process requires much more memory. In terms of deployment, a web application on Ruby on Rails could be harder to deploy than sites that are using more common technologies, such as PHP. That’s because not all the hosting providers support Rails, but in time the support of Rails is increasing.</p>


<p>There are some kinds applications in which Ruby on Rails is not suitable for:</p>


<ul>
    <li>Static web sites.</li>
    <li>Content Management Systems.</li>
    <li>Sites that depend on large amount of existing code or legacy code.</li>
    <li>Sites with legacy databases.</li>
    <li>Multi-site servers, situations that require dozens or hundreds of websites residing in a single server.</li>
    <li>Very large-scale web applications (millions of concurrent users) that need to deliver high-performance.</li>
</ul>


<p>The Rails architecture sacrifices some flexibility in configuration to increase productivity based on conventions that are considered best practices. This could make experienced developers in other languages feel tied to things in “the Rails way”. On the other hand, Ruby sacrifices speed and resource management to favor elegant syntax, productivity and maintainability. However, most of the small and mid-size enterprise web applications do little computing and factors such as latency, bandwidth and database performance are not very crucial. These factors start to matter in high-traffic websites with millions of concurrent users.</p>


<p>3.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Twitter case study</p>


<p>A study case of high-traffic web application using Rails is Twitter. They started using Ruby on Rails but they reached a point that the scaling of their platform was not cost-effective. This was mainly because Ruby on Rails has poor multi-threading support. As in 2011, they have more than 1 billion tweets per week and 200 million users. In 2011 they reported [1], that are moving their back-end applications from Ruby on Rails to Java, which perform 3x faster searches and handle high concurrency better.</p>


<p>As the Twitter Engineering team stated in [<a href="http://engineering.twitter.com/2011/05/engineering-behind-twitters-new-search.html">1</a>] and [<a href="http://engineering.twitter.com/2011/04/twitter-search-is-now-3x-faster_1656.html">2</a>]:“<em>As part of the effort, we launched a new </em><a href="http://engineering.twitter.com/2010/10/twitters-new-search-architecture.html"><em>real-time search engine</em></a><em>, changing our back-end from MySQL to a real-time version of </em><a href="http://lucene.apache.org/java/docs/index.html"><em>Lucene</em></a><em>. Last week, we launched a replacement for our Ruby-on-Rails front-end: a Java server we call Blender. We are pleased to announce that this change has produced a 3x drop in search latencies and will enable us to rapidly iterate on search features in the coming months.</em>” … And later… “<em>In April 2011, we launched a replacement, called Blender, which improved our search latencies by 3x, gave us 10x throughput, and allowed us to remove Ruby on Rails from the search infrastructure. Today, we are indexing an average of 2,200 TPS while serving 18,000 QPS (1.6B queries per day!). More importantly, Blender completed the infrastructure necessary to make the most significant user-facing change to Twitter search since the acquisition of Summize.”</em></p>


<p>3.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Yellopages.com case study</p>


<p>Yellowpages.com on the other hand moved from Java to Ruby on Rails framework. The rationale behind this decision is that they pursued to increase their maintainability, absolute control of URLs, no sessions, and be more agile.&nbsp; They have 170 million page views per month and 2.5 million searches per day.</p>


<p><a href="http://www.brianburridge.com/2008/06/08/yellowpagescom-on-rails/comment-page-1/#comment-15463">Brian Burridge</a> summarizes the process in the following way “YellowPages.com’s move from Java to Rails. They serve up to 23 million visitors a month. The conversion resulted in 20,000 lines of Ruby code instead of 125,000 lines of Java code, and most importantly eased the difficulty they had in maintaining it. Once complete, and optimized their site is now faster than before. They also completed the rewrite in three months with four developers.”</p>


<p>&nbsp;</p>


<h1>4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Summary</h1>


<p>Ruby on Rails has received widespread support throughout the software development industry, more specifically the open-source community. This support reflects, to a certain extent, that the framework was able to provide a fairly robust architecture somewhat consistent with the goals that the architect envisioned.</p>


<p>The framework successfully exhibits must of its intended quality attributes. The responsibility of maintaining some of these qualities are deferred to third party components, as is the case of the performance quality, which is deferred to whichever web-server is configured at development or deployment time. The biggest strength of the framework is the way it leverages the Convention over Configuration and Don’t Repeat Yourself principles. This principle enables intuitive approaches when dealing with certain tactics to achieve some of the quality attributes. For instance, modifiability becomes less hassle due to the isolation or centralization of certain changes since the framework relies on default places where certain functionality should be located.</p>


<p>On the other hand, Rails inherits some of the weaknesses of the language used to build it. More specifically, poor concurrency support hinders the scalability potential of an application built using Ruby on Rails. Furthermore, memory management is not as efficient as other languages available. For instance, Java exhibits a much better garbage collector behavior when compared with Ruby on Rails.</p>


<p>Overall, it would be safe to say that the framework architecture meets most of its intended goals, but not without its caveats. The level and speed of adoption in industry and the open-source community could be used as validation of the potential the framework has, but at the same time we see limitations emerging when using the framework. Some of these limitations are part of the driven force behind the ongoing evolution of Ruby on Rails.</p>

]]></content>
  </entry>
  
</feed>
