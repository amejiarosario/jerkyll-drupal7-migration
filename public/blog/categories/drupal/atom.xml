<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: drupal | Adrian Mejia's [code]Blog]]></title>
  <link href="http://adrianmejia.com/blog/categories/drupal/atom.xml" rel="self"/>
  <link href="http://adrianmejia.com/"/>
  <updated>2013-02-02T14:18:33-05:00</updated>
  <id>http://adrianmejia.com/</id>
  <author>
    <name><![CDATA[Adrian Mejia]]></name>
    <email><![CDATA[me@adrianmejia.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Blog migration explained: Drupal 7 to Jekyll]]></title>
    <link href="http://adrianmejia.com/blog/2012/04/27/blog-migration-explained-drupal-7-to-jekyll/"/>
    <updated>2012-04-27T22:00:00-04:00</updated>
    <id>http://adrianmejia.com/blog/2012/04/27/blog-migration-explained-drupal-7-to-jekyll</id>
    <content type="html"><![CDATA[<p>This post is a guide on how to extract your blog posts information from Drupal 7 to other systems. And also automatically create a redirect files from the old blog to the new one. In this case, I migrated to Jerkyll/Octopress blog but from the data extracted in with my script you can migrate any other blog system. Hopefully, this will save you a lot of time if you need to do the same task. If you run into troubles go to last section of the post it has some suggestions.</p>

<h2>Extract data from Drupal 7 site</h2>

<h3>SQL extraction</h3>

<p>You need to extract the data from your Drupal 7, there are several ways. You can connect to your web host via ssh and generate SQL dump.</p>

<p>{% codeblock lang:sql %}
mysqldump –uUSERNAME –pPASSWORD DATABASE > FILENAME.sql
{% endcodeblock %}</p>

<p>(replace the UPPERCASE letters with your settings)</p>

<p>You can download the file *.sql to your computer and run the following command to install to upload the data in your local database.</p>

<p>{% codeblock lang:sql %}
mysql –uUSERNAME –pPASSWORD DATABASE &lt; FILENAME.sql
{% endcodeblock %}</p>

<p>If you have a access to you phpmyadmin in your host server you can download your sql dump file through that also. Other method is to use a local port fordwarding using SSH… anyways, get access to your database.</p>

<h3>Run the script</h3>

<p>The 2nd and final step is to run the script that does all the magic. Below I will explain how it works in case that you want to customize.</p>

<p>{% gist 2515239 drupal2jekyll.rb %}</p>

<p>Replace the place holders with your actual values:</p>

<ul>
<li>OLD_DOMAIN</li>
<li>NEW_DOMAIN</li>
<li>ENV['DRUPAL_DATABASE']</li>
<li>ENV['DB_USER']</li>
<li>ENV['DB_PASSWORD']</li>
</ul>


<p>After you run it, it will generate 3 folders:</p>

<ul>
<li>_post: has all your post in the Jekyll style (categories and tags and everything)</li>
<li>_draft: not published posts if any</li>
<li>drupal_redirect: for each url of your posts it has a folder with a redirect index.php file to your new domain.</li>
</ul>


<p>Copy each of this folder to their respective places. Copy the content to your drupal_redirect to the root of your old blog and that's it. It will redirect all your all blog URLs to your new site.</p>

<h3>Behind the scenes…</h3>

<p>First, you need to extract the data from your Drupal site. I reversed engineer the database in order to extract the post, title, url alias (slug), tags, publish info, format and the last version of the post. The query that does all the magic is the following one:</p>

<p>{% codeblock Drupal 7 Query to extract all the post info lang:sql %}
SELECT
n.nid,
n.title,
n.created,
n.changed,
b.body_value AS 'body',
b.body_summary,
b.body_format,
n.status,
l.alias AS 'slug',
GROUP_CONCAT( d.name SEPARATOR ', ' ) AS 'tags'</p>

<p>FROM url_alias l, node n
JOIN field_data_body b ON b.entity_id = n.nid
JOIN taxonomy_index t ON t.nid = n.nid
JOIN taxonomy_term_data d ON t.tid = d.tid</p>

<p>WHERE n.type = 'blog'
AND b.revision_id = n.vid
AND l.source = CONCAT( 'node/', n.nid )</p>

<p>GROUP BY n.nid
{% endcodeblock %}</p>

<p>As might notice, it concatenates all the tags separated by comma and also finds the alias of the url if is called node. Also you can also find the url alias for other pages such as terms or taxonomies. But let’s keep it simple and get the posts urls.</p>

<p>Finally, the script will use the data from this query to generate the new posts files and also to create the redirect files.</p>

<p>As might notice, it concatenates all the tags separated by comma and also finds the alias of the url if is called node. Also you can also find the url alias for other pages such as terms or taxonomies. But let’s keep it simple and get the posts urls.</p>

<p>Finally, the script will use the data from this query to generate the new posts files and also to create the redirect files.</p>

<h3>Troubleshooting</h3>

<p>I had a hard time having the mysql gem work with seqel in my Mac OS X 10.7 (Lion) and ruby 1.9.2.</p>

<p>I got the following errors:</p>

<ul>
<li>Library not loaded: libmysqlclient.18.dylib (LoadError)
Sequel::DatabaseConnectionError: Mysql::ClientError::ServerGoneError: The MySQL server has gone away mysql2 ruby</li>
<li>"LoadError: require 'mysql' did not define Mysql::CLIENT_MULTI_RESULTS!"</li>
<li>"You are probably using the pure ruby mysql.rb driver, which Sequel does not support. You need to install the C based adapter, and make sure that the mysql.so file is loaded instead of the mysql.rb file."</li>
<li>Sequel::AdapterNotFound: LoadError: require 'mysql' did not define Mysql::CLIENT_MULTI_RESULTS! You are probably using the pure ruby mysql.rb driver, which Sequel does not support. You need to install the C based adapter, and make sure that the mysql.so file is loaded instead of the mysql.rb file.</li>
<li>And others…</li>
</ul>


<h4>Solution:</h4>

<p>The mysql gem have been abandoned, so you also need mysql2 to work propery with sequel</p>

<p>{% codeblock  bash Install MySQL gems lang:bash %}
$ sudo gem install sequel
$ sudo gem install mysql -- --with-mysql-config=/usr/local/mysql/bin/mysql_config
$ sudo gem install mysql2 -- --with-mysql-config=/usr/local/mysql/bin/mysql_config
{% endcodeblock %}</p>

<p>also  you need to copy the following lib:</p>

<p>{% codeblock Reference needed libs lang:bash %}
$ sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/lib/libmysqlclient.18.dylib
{% endcodeblock %}</p>

<p>That should work.</p>

<p>Just if you are courious there is another gem called ruby-mysql, with which you can connect to mysql. But it doesn’t work with sequel</p>

<p>{% codeblock Alternative gem to connect to mysql (ruby-mysql) lang:bash %}
$ gem install ruby-mysql -- --with-mysql-config=/usr/local/mysql/bin/mysql_config
$ irb</p>

<blockquote><p>require 'mysql'
db = Mysql.real_connect("SERVER","USER","PASSWORD","DATABASE")
{% endcodeblock %}</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to setup Drupal WYSIWYG and Images uploading?]]></title>
    <link href="http://adrianmejia.com/blog/2011/11/09/how-to-setup-drupal-wysiwyg-and-images-uploading/"/>
    <updated>2011-11-09T00:00:00-05:00</updated>
    <id>http://adrianmejia.com/blog/2011/11/09/how-to-setup-drupal-wysiwyg-and-images-uploading</id>
    <content type="html"><![CDATA[<p>It have been a pain for me to upload images and deal with tons of WYSIWYG editors... After many trials in this post I recompiled my experiences and the best method that I have found so far. If you have any suggestion I&#39;m willing to hear it, too.</p>


<div>
    <strong>1. Install and enable the following modules:</strong></div>


<div>
    &nbsp;</div>


<div>
    http://drupal.org/project/ckeditor (disable the WYSIWYG module if you have it install it)</div>


<div>
    http://drupal.org/project/imce -or- http://drupal.org/project/elfinder</div>


<div>
    &nbsp;</div>


<div>
    - optional -</div>


<div>
    http://drupal.org/project/ckeditor_link</div>


<div>
    &nbsp;</div>


<div>
    <div>
        How to setup Drupal WYSIWYG and Images uploading?</div>
    <div>
        &nbsp;</div>
    <div>
        It have been a pain for me to upload images and deal with tons of WYSIWYG editors... After many trials in this post I recompiled my experiences and the best method that I have found so far. If you have any suggestion I&#39;m willing to hear it, too.</div>
    <div>
        &nbsp;</div>
    <div>
        &nbsp;</div>
    <div>
        <strong>1. Install and enable the following modules:</strong></div>
    <div>
        &nbsp;</div>
    <div>
        http://drupal.org/project/ckeditor (disable the WYSIWYG module if you have it install it)</div>
    <div>
        http://drupal.org/project/imce -or- http://drupal.org/project/elfinder</div>
    <div>
        &nbsp;</div>
    <div>
        - optional -</div>
    <div>
        http://drupal.org/project/ckeditor_link</div>
    <div>
        &nbsp;</div>
    <div>
        <strong>2. Setting up IMCE</strong></div>
    <div>
        a. Install and enable the IMCE module at module administration page.</div>
    <div>
        b. Create configuration profiles and assign them to user roles at /?q=/admin/config/media/imce <strong>-or-</strong> Menu: Configuration &raquo; Media &raquo; IMCE&nbsp;</div>
    <div>
        c. Test it at /imce.</div>
    <div>
        &nbsp;</div>
    <div>
        <strong>3. Setup text formats. </strong>You can create two new ones to be used by the ckeditor (basic and full):</div>
    <div>
        a. Menu: Configuration &raquo; Content authoring &raquo; Text formats</div>
    <div>
        b. Click &quot;+ Add text format&quot; and add two new formats &quot;ckeditor-basic&quot; and &quot;ckeditor-full&quot; with the &quot;administrator&quot; and &quot;authenticated users&quot; check boxes marked. Everything else could remain in their default values.</div>
    <div>
        c. Back to Configuration &raquo; Content authoring, you can rearrange the order, the top most one will be the default.</div>
    <div>
        &nbsp;</div>
    <div>
        <strong>4. Setup CKEditor</strong></div>
    <div>
        After you install the CKEditor module, download the latest version of ckeditor from http://ckeditor.com/download</div>
    <div>
        a. &quot;Create a new profile&quot; link</div>
    <div>
        b. Setup the name in the &quot;Basic Setup&quot; section and choose one of Input format that you created in step (3)</div>
    <div>
        c. In &quot;Editor Appearance&quot; you can setup the toolbar load (basic, full, advance)</div>
    <div>
        d. In &quot;FILE BROWSER SETTINGS&quot; select &quot;IMCE&quot; as the &quot;File browser type&quot;</div>
    <div>
        e. Save and you can repeated this steps for full and basic.</div>
    <div>
        &nbsp;</div>
    <div>
        <strong>5. You are all set.&nbsp;</strong>When you add new content your Textbox and imaging uploading should look like this:</div>
</div>


<div>
    &nbsp;</div>


<div>
    <img alt="" src="http://adrianmejiarosario.com/sites/default/files/Screen%20Shot%202011-11-09%20at%205.05.23%20PM.png" style="width: 500px; height: 325px; " /></div>


<div>
    &nbsp;</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git+ftp: Publish Git repository over FTP ]]></title>
    <link href="http://adrianmejia.com/blog/2011/11/09/gitftp-publish-git-repository-over-ftp/"/>
    <updated>2011-11-09T00:00:00-05:00</updated>
    <id>http://adrianmejia.com/blog/2011/11/09/gitftp-publish-git-repository-over-ftp</id>
    <content type="html"><![CDATA[<p>I have been working with websites for a while and also with different web hosts. The default way to upload content is through FTP but it takes a lot of time because upload the entire site each time. Some web hosts &nbsp;have ssh and git, which is great for deployement because you can keep track of the versions and also upload only the files that changes.</p>


<div>
    &nbsp;</div>


<div>
    In order to use git for local development and ftp (for hosting that doesn&#39;t support git/ssh) there are some options:</div>


<div>
    &nbsp;</div>


<div>
    <a href="https://github.com/resmo/git-ftp">https://github.com/resmo/git-ftp</a> - Git powered FTP client written as shell script.</div>


<div>
    <a href="https://github.com/ezyang/git-ftp">https://github.com/ezyang/git-ftp</a> - A quick and efficient way of pushing changed files to a website via FTP using python.</div>


<div>
    &nbsp;</div>


<div>
    I have use ezyang/git-ftp to deploy my drupal websites with good results.</div>


<div>
    &nbsp;</div>


<div>
    1. Install &#39;git-python&#39; first from <a href="http://gitorious.org/git-python">http://gitorious.org/git-python</a> -or- using `easy_install gitpython`</div>


<div>
    2. git clone <a href="https://github.com/ezyang/git-ftp.git">https://github.com/ezyang/git-ftp.git</a></div>


<div>
    3. You can create an alias for easy access in `~/.bash_profile` such as `alias git-ftp=&quot;python ~/git-ftp/git-ftp.py &quot;`</div>


<div>
    4. Just run the command `python ~/git-ftp/git-ftp.py ` where is your git repository that you want to upload. I will prompt all the ftp details and also will create the config file for you.</div>


<div>
    &nbsp;</div>


<div>
    You might want to setup files to ignore. If you are using drupal you should create a .gitignore file with a content similar to this:</div>


<div>
    &nbsp;</div>


<div>
    <pre>
.DS_Store*


# Ignore configuration files that may contain sensitive information.

sites/*/settings*.php


# Ignore paths that contain user-generated content.

sites/*/files

sites/*/private</pre>
</div>


<div>
    &nbsp;</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update Drupal sites]]></title>
    <link href="http://adrianmejia.com/blog/2011/11/04/update-drupal-sites/"/>
    <updated>2011-11-04T00:00:00-04:00</updated>
    <id>http://adrianmejia.com/blog/2011/11/04/update-drupal-sites</id>
    <content type="html"><![CDATA[<p>The better way to learn is by a concrete example. I update a site called "heyshuga" from Drupal 7.8 to 7.9. Here are the steps</p>

<ol>
<li>Download the latest version of drupal</li>
</ol>


<p>$ wget http://drupal.org/files/projects/drupal-x.y.tar.gz
$ tar -zxvf drupal-x.y.tar.gz</p>

<p>-or using drush-</p>

<p>$ drush dl drupal</p>

<ol>
<li>Copy the new files to the old directory</li>
</ol>


<p>$ cp -R drupal-x.y/* drupal-x.y/.htaccess /path/to/your/installation</p>

<ol>
<li>Run the drupal update</li>
</ol>


<p>www.yousite.com/update.php</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git auto-commit with Crontab]]></title>
    <link href="http://adrianmejia.com/blog/2011/08/15/git-auto-commit-with-crontab/"/>
    <updated>2011-08-15T00:00:00-04:00</updated>
    <id>http://adrianmejia.com/blog/2011/08/15/git-auto-commit-with-crontab</id>
    <content type="html"><![CDATA[<p>You might want to commit from a git repository from time to time for several purposes (backup, control version, continuous integration, etc). One way to accomplish that is using the CronTab (Cron is used to run periodic task in Unix-like systems).</p>

<p>Here is an example.</p>

<p>1.- Create an script. e.g. baskitup.sh with:</p>

<pre>
<code># MySQL-dump: save a copy of the actual content in the database. (this is for a Drupal site, the backup is done using drupal's drush)
php -c ~/www/php.ini  ~/drush/drush.php -r /home/adrimej0/www -u 1 sql-dump --result-file=latest.sql

# Git: add and commit changes
cd /home/adrimej0/www && /home/adrimej0/opt/bin/git commit -a -m "weekly crontab backup `date`"

# send data to Git server
cd /home/adrimej0/www && /home/adrimej0/opt/bin/git push origin master</code>
</pre>


<p>2.- Set up the cron. In the shell write the following</p>

<pre>
<code>$ crontab -e</code>
</pre>


<p>add the following command line for weekly auto-commits:</p>

<pre>
<code>MAILTO="youremail@domain.com"
0 0 * * 0 /home/adrimej0/www/backitup.sh</code>
</pre>


<p>Done. Now your (drupal) site will be backed up every week automatically (every Sunday at midnight).</p>
]]></content>
  </entry>
  
</feed>
