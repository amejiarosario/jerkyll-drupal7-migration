<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web development | Adrian Mejia's [code]Blog]]></title>
  <link href="http://adrianmejia.com/blog/categories/web-development/atom.xml" rel="self"/>
  <link href="http://adrianmejia.com/"/>
  <updated>2013-02-02T14:18:33-05:00</updated>
  <id>http://adrianmejia.com/</id>
  <author>
    <name><![CDATA[Adrian Mejia]]></name>
    <email><![CDATA[me@adrianmejia.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backbone.js for absolute beginners - getting started (part 4: Routers)]]></title>
    <link href="http://adrianmejia.com/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-4/"/>
    <updated>2012-09-13T14:41:00-04:00</updated>
    <id>http://adrianmejia.com/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-4</id>
    <content type="html"><![CDATA[<p>The part 3 of this tutorial is <a href="/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3/">here</a>.</p>

<h2>2.6 Backbone.Router</h2>

<p>You could build web application without using the routers.  However, if you want to make reference to certain ‘state’ or location of the web application, you need a reference (link/URL) to it. This is where routers come to rescue.</p>

<p>Routing in most of JS application are achieved by hash-tags. E.g. If you take a look of Gmail URL you will see something like:</p>

<p><code>https://mail.google.com/mail/u/0/#inbox/139c0d48e11d986b</code></p>

<p>where the <code>#inbox/139c0d48e11d986b</code> is the hash-tag which reference some email location.</p>

<p>In backbone, routes are hash maps that match URL patterns to functions. You can use parameter parts, such as <code>todos/:id</code>, or using splats <code>file/*path</code> you will match all the parameters from the splat on. For that reason, the splat parameter should be always the last matcher.</p>

<h3>2.6.1 Initializing the Router</h3>

<p>In our Todo app, we are going to use routers to filter between the tasks that are pending and the ones that have been completed. So, let's initialize the routes this way:</p>

<p>{% codeblock Define Router  lang:js https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html Full Code %}</p>

<pre><code>app.Router = Backbone.Router.extend({
  routes: {
    '*filter' : 'setFilter'
  },
  setFilter: function(params) {
    console.log('app.router.params = ' + params); // just for didactical purposes.
    window.filter = params.trim() || '';
    app.todoList.trigger('reset');
  }
}); 
</code></pre>

<p>{% endcodeblock %}</p>

<p>Now, you need to initialize it, adding this lines:</p>

<p>{% codeblock Initialize router  lang:diff https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html Full Code %}</p>

<pre><code> //--------------
 // Initializers
 //--------------   
</code></pre>

<ul>
<li> app.router = new app.Router();</li>
<li> Backbone.history.start();  <br/>
 app.appView = new app.AppView();</li>
</ul>


<p>{% endcodeblock %}</p>

<p>You can test that you router is working just typing <code>#anything/that/you/want</code> and seeing the parameter in you browser's console.</p>

<h3>2.6.1 Processing the routes</h3>

<p>Before rendering the list of items, you need to check the parameters to wether show only the pending ones, or the completed or show them all. As shown in the code snipet below.</p>

<p>{% codeblock Processing the routes in app.AppView  lang:diff https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html Full Code %}</p>

<p>@@ -164,7 +177,18 @@</p>

<pre><code>   },
   addAll: function(){
     this.$('#todo-list').html(''); // clean the todo list
</code></pre>

<ul>
<li><pre><code> app.todoList.each(this.addOne, this);
</code></pre></li>
<li><pre><code> // filter todo item list
</code></pre></li>
<li><pre><code> switch(window.filter){
</code></pre></li>
<li><pre><code>   case 'pending':
</code></pre></li>
<li><pre><code>     _.each(app.todoList.remaining(), this.addOne);
</code></pre></li>
<li><pre><code>     break;
</code></pre></li>
<li><pre><code>   case 'completed':
</code></pre></li>
<li><pre><code>     _.each(app.todoList.completed(), this.addOne);
</code></pre></li>
<li><pre><code>     break;            
</code></pre></li>
<li><pre><code>   default:
</code></pre></li>
<li><pre><code>     app.todoList.each(this.addOne, this);
</code></pre></li>
<li><pre><code>     break;
</code></pre></li>
<li><pre><code> }
</code></pre>

   },
   newAttributes: function(){

<pre><code> return {
</code></pre></li>
</ul>


<p>{% endcodeblock %}</p>

<p>If you try adding the words <code>#/pending</code> or <code>#/completed</code> at the end of the URL you'll get an error!. That's a good sign, it means the routes are working, but we haven't implemented the <code>app.todoList.remaining()</code> and <code>app.todoList.completed()</code>. So, that's next:</p>

<p>{% codeblock Defining 'completed' and 'remaining' functions in app.TodoList  lang:diff https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html Full Code %}</p>

<p>@@ -85,7 +90,15 @@</p>

<pre><code> //--------------
 app.TodoList = Backbone.Collection.extend({
   model: app.Todo,
</code></pre>

<ul>
<li>   localStorage: new Store("backbone-todo")</li>
<li>   localStorage: new Store("backbone-todo"),</li>
<li>   completed: function() {</li>
<li><pre><code> return this.filter(function( todo ) {
</code></pre></li>
<li><pre><code>   return todo.get('completed');
</code></pre></li>
<li><pre><code> });
</code></pre></li>
<li>   },</li>
<li>   remaining: function() {</li>
<li><pre><code> return this.without.apply( this, this.completed() );
</code></pre></li>
<li>   }    <br/>
 });</li>
</ul>


<p>{% endcodeblock %}</p>

<p>Now, if you try again adding the hash-tags it will work! But, it will be better if the user can have links to that instead of typing URLs. So, let's add them.</p>

<p>{% codeblock Show routes' links  lang:diff https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html Full Code %}</p>

<p>@@ -32,6 +32,11 @@</p>

<pre><code> &lt;header id="header"&gt;
   &lt;h1&gt;Todos&lt;/h1&gt;
   &lt;input id="new-todo" placeholder="What needs to be done?" autofocus&gt;
</code></pre>

<ul>
<li>   <div></li>
<li><pre><code> &lt;a href="#/"&gt;show all&lt;/a&gt; |
</code></pre></li>
<li><pre><code> &lt;a href="#/pending"&gt;show pending&lt;/a&gt; |
</code></pre></li>
<li><pre><code> &lt;a href="#/completed"&gt;show completed&lt;/a&gt;
</code></pre></li>
<li>   </div>    <br/>
 </header>
 <section id="main">
   <ul id="todo-list"></ul></li>
</ul>


<p>{% endcodeblock %}</p>

<p>Well, that's all! If completed these 4 parts tutorial you will be familiar with the main Backbone modules (Models, Collections, Views, Events, and Routes). To increase you knowledge you can follow the following resources:</p>

<ul>
<li><a href="http://addyosmani.github.com/backbone-fundamentals/?utm_source=adrianmejia.com">Developing Backbone.js Applications</a></li>
<li><a href="http://backbonejs.org/?utm_source=adrianmejia.com">Official documentation</a></li>
<li><a href="https://github.com/documentcloud/backbone/blob/master/backbone.js">Source code - it's the ultimate source of true</a></li>
</ul>


<p>Hope it was helpful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.js for absolute beginners - getting started (part 3: CRUD)]]></title>
    <link href="http://adrianmejia.com/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3/"/>
    <updated>2012-09-13T01:37:00-04:00</updated>
    <id>http://adrianmejia.com/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3</id>
    <content type="html"><![CDATA[<p>The part 2 of this tutorial is <a href="/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2/">here</a>.</p>

<h2>2.5 Todo item list CRUD</h2>

<p>We basically have our working but there are a couple of features that could improve it. Let’s implement the CRUD (Create-Read-Update-Delete) for the item list.</p>

<h3>2.5.1. C-reate</h3>

<p>We are already can create item list from the console (2.3) and also from the UI (2.4.3). So, it’s done.</p>

<h3>2.5.2. U-pdate</h3>

<p>What if you make a mistake and want to change the text on some of your to-do list. Furthermore, you can notice that the checkboxes states are not persistent when you reload the pages. Let’s fix both problems.</p>

<p>1.- You want to respond to a double click event showing up a text box, where the user can change the text. First, let’s add the HTML in the <code>item-template</code> template below the label tag.</p>

<p><code>&lt;input class="edit" value="&lt;%- title %&gt;"&gt;</code></p>

<p>2.- If you refresh, you will notice that there are both displaying at the same time. So, you can hide them properly with the following CSS.
{% codeblock CSS lang:css https://raw.github.com/amejiarosario/Backbone-tutorial/3840dc802d6f311528298639150a5f52364c1975/backbone-tutorial.html Full Code %}</p>

<pre><code>#todo-list input.edit {
  display: none; /* Hides input box*/
}
#todo-list .editing label {
  display: none; /* Hides label text when .editing*/
}    
#todo-list .editing input.edit {
  display: inline; /* Shows input text box when .editing*/
}
</code></pre>

<p>{% endcodeblock %}</p>

<p>3.- Then, we need to add the events to the TodoView class to respond to the changes.</p>

<p>{% codeblock Todo Model lang:js https://raw.github.com/amejiarosario/Backbone-tutorial/3840dc802d6f311528298639150a5f52364c1975/backbone-tutorial.html Full Code %}</p>

<pre><code>// renders individual todo items list (li)
app.TodoView = Backbone.View.extend({
  tagName: 'li',
  template: _.template($('#item-template').html()),
  render: function(){
    this.$el.html(this.template(this.model.toJSON()));
    this.input = this.$('.edit');
    return this; // enable chained calls
  },
  initialize: function(){
    this.model.on('change', this.render, this);
  },      
  events: {
    'dblclick label' : 'edit',
    'keypress .edit' : 'updateOnEnter',
    'blur .edit' : 'close'
  },
  edit: function(){
    this.$el.addClass('editing');
    this.input.focus();
  },
  close: function(){
    var value = this.input.val().trim();
    if(value) {
      this.model.save({title: value});
    }
    this.$el.removeClass('editing');
  },
  updateOnEnter: function(e){
    if(e.which == 13){
      this.close();
    }
   }            
});
</code></pre>

<p>{% endcodeblock %}</p>

<p>You can find the <a href="https://github.com/amejiarosario/Backbone-tutorial/commit/3840dc802d6f311528298639150a5f52364c1975">diff</a> that were added to implement the update feature.</p>

<p><a href="https://github.com/amejiarosario/Backbone-tutorial/commit/19fa69e654ae5d370385675e4ffed615532b9934">Here</a> are the changes to fix the update for the checkboxes.</p>

<h3>2.5.2. D-elete</h3>

<p>To be able to remove to-do items, we need to add a remove button in each item and listen to the click event on it, which will trigger the destroy function in the selected todo object.</p>

<p>1.- Add the HTML markup for the remove button.</p>

<p>{% codeblock Remove Button into 'item template'  lang:diff https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html Full Code %}</p>

<p>@@ -47,6 +47,7 @@</p>

<pre><code>   &lt;input class="toggle" type="checkbox" &lt;%= completed ? 'checked' : '' %&gt;&gt;
   &lt;label&gt;&lt;%- title %&gt;&lt;/label&gt;
   &lt;input class="edit" value="&lt;%- title %&gt;"&gt;
</code></pre>

<ul>
<li>   <button class="destroy">remove</button>
 </div>
</script></li>
</ul>


<p>{% endcodeblock %}</p>

<p>2.- Listen for the click event in the button that you just created.</p>

<p>{% codeblock Add event listeners for the Remove Button in 'app.TodoView'  lang:diff https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html Full Code %}</p>

<p>@@ -105,12 +106,14 @@</p>

<pre><code>   },
   initialize: function(){
     this.model.on('change', this.render, this);
</code></pre>

<ul>
<li><pre><code> this.model.on('destroy', this.remove, this); // remove: Convenience Backbone'
</code></pre>

   },    <br/>
   events: {

<pre><code> 'dblclick label' : 'edit',
 'keypress .edit' : 'updateOnEnter',
 'blur .edit' : 'close',
</code></pre></li>
<li><pre><code> 'click .toggle': 'toggleCompleted'
</code></pre></li>
<li><pre><code> 'click .toggle': 'toggleCompleted',
</code></pre></li>
<li><pre><code> 'click .destroy': 'destroy'
</code></pre>

   },
   edit: function(){

<pre><code> this.$el.addClass('editing');
</code></pre></li>
</ul>


<p>{% endcodeblock %}</p>

<p>3.- Add the destroy method to the TodoView.</p>

<p>{% codeblock Add the destroy method to 'app.TodoView'  lang:diff https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html Full Code %}</p>

<p>@@ -130,7 +133,10 @@</p>

<pre><code>   },
   toggleCompleted: function(){
     this.model.toggle();
</code></pre>

<ul>
<li>   }</li>
<li>   },</li>
<li>   destroy: function(){</li>
<li><pre><code> this.model.destroy();
</code></pre></li>
<li>   }    <br/>
 });</li>
</ul>


<p>{% endcodeblock %}</p>

<p>You can download the full working code so far in <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html">here</a> and you can visualize the changes needed to implement the delete feature in <a href="https://github.com/amejiarosario/Backbone-tutorial/commit/1267e531ae3ef508eb32e5308c2cc965f02d1b45">here</a></p>

<h3>Continue with the <a href="/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-4/">4th part</a> and learn about Backbone's Routes!</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.js for absolute beginners - getting started (part 2: Models, Collections and Views)]]></title>
    <link href="http://adrianmejia.com/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2/"/>
    <updated>2012-09-13T00:08:00-04:00</updated>
    <id>http://adrianmejia.com/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2</id>
    <content type="html"><![CDATA[<p>The part 1 of this tutorial is <a href="/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/">here</a></p>

<h2>2. Todo App in Backbone (Models, Collections, View and Events)</h2>

<p>After completing this example app, you will have experience and basic understanding of all the modules of Backbone.</p>

<h3>2.1.- Todo app Boiler plate</h3>

<p>Let's start again with the initial file used on 1.1. And then add the following HTML code to add the structure.</p>

<p>{% codeblock HTML Structure lang:html https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html Full Code %}</p>

<p>  <section id="todoapp"></p>

<pre><code>&lt;header id="header"&gt;
  &lt;h1&gt;Todos&lt;/h1&gt;
  &lt;input id="new-todo" placeholder="What needs to be done?"&gt;
&lt;/header&gt;
&lt;section id="main"&gt;
  &lt;ul id="todo-list"&gt;&lt;/ul&gt;
&lt;/section&gt;
</code></pre>

<p>  </section></p>

<p>{% endcodeblock %}</p>

<p>We are going to implement a To-do list, which is basically un-ordered list (ul) of elements with checkboxes.</p>

<h3>2.2.- Backbone.Model</h3>

<p>Models are the heart of every application. It contains the interactive data and the logic surrounding it, such as data validation, getters and setters, default values, data initialization, conversions and so on.
For our example, we are going to create a model called <code>Todo</code>, which will store a string of text (title) and whether the task has been completed or not.</p>

<p>{% codeblock Todo Model lang:js https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html Full Code %}</p>

<pre><code>var app = {}; // create namespace for our app

app.Todo = Backbone.Model.extend({
  defaults: {
    title: '',
    completed: false
  }
});
</code></pre>

<p>{% endcodeblock %}</p>

<p>Notice, that for convention classes names are capitalize, while instance variables and objects are not. Another important aspect of models it’s that their properties are dynamic; they can be created on the fly and doesn’t have any specific type associated.</p>

<p><strong>Test what you just your coded!</strong></p>

<p>After you completed the code snippet above you can open your browser console and try this out, to get familiar with the models:</p>

<p>{% codeblock Practice in your Browser\'s console  lang:js %}
var todo = new app.Todo({title: 'Learn Backbone.js', completed: false}); // create object with the attributes specified.
todo.get('title'); // "Learn Backbone.js"
todo.get('completed'); // false
todo.get('created_at'); // undefined
todo.set('created_at', Date());
todo.get('created_at'); // "Wed Sep 12 2012 12:51:17 GMT-0400 (EDT)"
{% endcodeblock %}</p>

<h3>2.3.- Backbone.Collection</h3>

<p>As its name indicates, collections are ordered sets of models, where you can get and set models in the collection, listen for events when any element in the collection changes, and fetching for model’s data from the server.</p>

<p>Models are allows linked to data persisted in some form (database, file, memory), so it requires a reference to it. Therefore, you need to specify the <code>url</code> parameter with a relative url, where the model’s resource would be located on the server. Otherwise, you will get errors like:</p>

<p><code>A "url" property or function must be specified</code></p>

<p>We are not going to use a backend server for simplicity; instead we are going to use HTML5’s local storage for persistence through a Backbone’s plugin. So, we need to define the localStorage property instead of URL.</p>

<p>{% codeblock Todo list Collection lang:js https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html Full Code %}</p>

<pre><code>app.TodoList = Backbone.Collection.extend({
  model: app.Todo,
  localStorage: new Store("backbone-todo")
});

// instance of the Collection
app.todoList = new app.TodoList();
</code></pre>

<p>{% endcodeblock %}</p>

<p><strong>Test what you just your coded!</strong></p>

<p>{% codeblock Practice in your Browser\'s console  lang:js %}
var todoList = new app.TodoList()
todoList.create({title: 'Learn Backbone\'s Collection'}); // notice: that <code>completed</code> will be set to false by default.
var lmodel = new app.Todo({title: 'Learn Models', completed: true});
todoList.add(lmodel); // ["Learn Backbone's Collection", "Learn Models"]
todoList.pluck('title'); // [false, true]
JSON.stringify(todoList); // "[{"title":"Learn Backbone's Collection","completed":false,"id":"d9763e99-2267-75f5-62c3-9d7e40742aa6"},{"title":"Learn Models","completed":true}]"
{% endcodeblock %}</p>

<h2>2.4.- Backbone.View</h2>

<p>As mentioned in 1.2, Views doesn’t have the view or markup for our application, but rather put together data with templates to finally render a view based on events or data changes.</p>

<h3>2.4.1.- Basic Properties</h3>

<p>There are 4 basic properties in a view: el, initialize, render, and events.</p>

<h3>2.4.1.1.- <code>view.el</code></h3>

<p>Every view needs to reference a DOM at all times. Therefore, the view will inject content into this element. This is the <code>el</code> property. <code>this.el</code> is created from view’s <code>el</code>,<code>tagName</code>, <code>className</code>, <code>id</code> or <code>attributes</code> properties. If none of these are specified, then this.el is an empty <code>div</code>. The <code>view.$el</code> it’s a cached jQuery object of the view’s element (view.el).</p>

<h3>2.4.1.2.- Initialize/construtor</h3>

<p>Here you have the option to pass parameters that will be attached to a model, collection or view.el.</p>

<h3>2.4.1.3.- <code>render</code></h3>

<p>In this function, you inject the markup into the elements. Not all views require having a render function, as you are going to see in the sample code, they can call other view’s render functions.</p>

<h3>2.4.1.5.- delegated events</h3>

<p>Events are written in the <code>{"event selector": "callback"}</code> format.</p>

<h2>2.4.2.- Todo View</h2>

<p>Now back, to our To-do application. We need a view that renders each of the todo model objects into the page.</p>

<p>{% codeblock Todo View lang:js https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html Full Code %}</p>

<pre><code>// renders individual todo items list (li)
app.TodoView = Backbone.View.extend({
  tagName: 'li',
  template: _.template($('#item-template').html()),
  render: function(){
    this.$el.html(this.template(this.model.toJSON()));
    return this; // enable chained calls
  }
});
</code></pre>

<p>{% endcodeblock %}</p>

<h2>2.4.3.- App View</h2>

<p>The <code>item-template</code> and <code>app.TodoView</code> will render one todo item. Now, we need another view that take a collection and render each of the individual items. We are going to call it ‘AppView’. Take a look through this code and try to identify each of the elements (we have already describe them in the previous sections).</p>

<p>{% codeblock item-template lang:html https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html Full Code %}</p>

<pre><code>  &lt;script type="text/template" id="item-template"&gt;
    &lt;div class="view"&gt;
      &lt;input class="toggle" type="checkbox"&gt;
      &lt;label&gt;&lt;%- title %&gt;&lt;/label&gt;
    &lt;/div&gt;
  &lt;/script&gt;
</code></pre>

<p>{% endcodeblock%}</p>

<p>{% codeblock Todo View lang:js https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html Full Code %}</p>

<pre><code>// renders the full list of todo items calling TodoView for each one.
app.AppView = Backbone.View.extend({
  el: '#todoapp',
  initialize: function () {
    this.input = this.$('#new-todo');
    app.todoList.on('add', this.addAll, this);
    app.todoList.on('reset', this.addAll, this);
    app.todoList.fetch(); // Loads list from local storage
  },
  events: {
    'keypress #new-todo': 'createTodoOnEnter'
  },
  createTodoOnEnter: function(e){
    if ( e.which !== 13 || !this.input.val().trim() ) { // ENTER_KEY = 13
      return;
    }
    app.todoList.create(this.newAttributes());
    this.input.val(''); // clean input box
  },
  addOne: function(todo){
    var view = new app.TodoView({model: todo});
    $('#todo-list').append(view.render().el);
  },
  addAll: function(){
    this.$('#todo-list').html(''); // clean the todo list
    app.todoList.each(this.addOne, this);
  },
  newAttributes: function(){
    return {
      title: this.input.val().trim(),
      completed: false
    }
  }
});

//--------------
// Initializers
//--------------   

app.appView = new app.AppView();     
</code></pre>

<p>{% endcodeblock %}</p>

<h3>Continue with the <a href="/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3/">3rd part</a> and learn how to make CRUD for your models!</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.js for Absolute Beginners - Getting started (Part 1: Intro)]]></title>
    <link href="http://adrianmejia.com/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/"/>
    <updated>2012-09-11T22:50:00-04:00</updated>
    <id>http://adrianmejia.com/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started</id>
    <content type="html"><![CDATA[<p>Backbone.js is a JavaScript framework, among many others, that is gaining special attention in the web development community because it's ease of use and the structure that it provides to JavaScript applications.</p>

<p>(Revised: 2013-02-02)</p>

<h3>Brief Background (optional reading)</h3>

<p><a href="#start">TL; DR</a>: You need to use JavaScript heavily in order to make responsive and interactive web applications. <a href="#start">Jump to this and get started.</a></p>

<p>The web application development process has been evolving over the years. In its beginning… the they were just static HTML pages, which required programmers change the code (HTML, CSS, JS) to change the content. Later, in web 2.0, server side programming languages (like PHP, Ruby, Java, …) were added to generate HTML pages dynamically based on user inputs and data stored in database. That was huge improvement, and most of the pages served today use this approach. However, to provide even more responsiveness of the website, speed and enhance the user interaction, it requiress to bring the logic closer to the client (browser).  There are a couple of languages that can run in the browsers besides JS, such as Java, Flash and others. However, these ones require extra plugins and are not universally accepted as JavaScript.</p>

<p>Therefore, web apps nowadays require heavy use of JavaScript to generate content on the fly and quickly. The user can’t wait between request. A lot of the logic/code that used to be in the server side is being moved to the client side. JS allows the web sites to render only the parts of the website that changed and not the full-page on every request. Examples of this kind of web apps are Gmail, Pandora, Pinterest, Nokia Maps 3D and others.</p>

<p>A common problem with large JS web apps developed is that it became pretty messy really quick. The lacks of structure it’s hard to maintain. This is where Backbone comes into play. It provides structure to organize the code and increase maintainability. Backbone is not the only one; in fact, there are many JS frameworks that accomplish similar results like Ember.js, Angular.js and so on. However, I choose Backbone because is one of the most widely spread framework in its category. It has a vibrant community and it’s also being fully used in production for a considerable number of big companies like: Wal-Mart mobile, Groupon, Khan Academy, Pandora, Wordpress, Foursquare, and so on.</p>

<p><a id="start"></a></p>

<h2>Just enough to get started with Backbone.js</h2>

<p>Backbone.js has hard dependency on underscore.js and a soft dependency on jQuery. It’s composed by the following modules:</p>

<ul>
<li> Views</li>
<li> Events</li>
<li> Models</li>
<li> Collections</li>
<li> Routers</li>
</ul>


<h2>Shut up and show me the code!</h2>

<p>Alright! the way we are going to explore all of these modules it’s through examples. This is a practical tutorial that I wished I had it when I stared learning. So, this is a fat-free walkthrough Backbone.js, as simple as it could be, all the code is in one file just for didactical purposes (no hidden magic tricks, all cards are on the board).</p>

<p>The first example is a ‘Hello World’ app in Backbone and the second it’s a Todo App. After doing these 2 apps, you’ll see in action every Backbone module and have practical understanding about them.</p>

<h2>1. Hello World in Backbone.js</h2>

<p>You can follow alone this tutorial's code in this <a href="https://github.com/amejiarosario/Backbone-tutorial/commits/">repository</a>. Each feature implemented it’s a new commit, so you can easily see what changed in every step.</p>

<p><strong>1.1.- Simple HTML5 and Backbone boilerplate</strong></p>

<p>To get started download <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/9821e5b1fdc39d22720b1a1d89055cc531f994d7/backbone-tutorial.html">this simple html file</a>. This file  contains the libraries that you'll need (jQuery, Underscore.js, Backbone.js and Backbone-localStorage.js) and the placeholders for your HTML and JS code. Don't worry about the libraries we are going to explain them, as we need them.</p>

<p>After downloading the <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/9821e5b1fdc39d22720b1a1d89055cc531f994d7/backbone-tutorial.html">file</a>, notice the HTML where all your page will be built using Backbone.Views!</p>

<p>All your js app will be loaded here:</p>

<p><code>&lt;div id="container"&gt;Loading...&lt;/div&gt;</code></p>

<p><strong>1.2.- Backbone's Views</strong></p>

<p>Backbone's Views are the equivalent of ‘controllers’ on MVC frameworks (like Ruby on Rails), if you are not familiar with MVC frameworks nevermind. Backbone's Views glues together user events (clicks, pressed keys …), render HTML views and templates, and interacts with models which contains the data of the application.</p>

<p>Here is an example of a Backbone.view: READ the code and COMMENTS, then insert this code in the javascript block in the HTML file that you downloaded.</p>

<p>{% codeblock Simple Backbone.View lang:js https://raw.github.com/amejiarosario/Backbone-tutorial/0bf69185f4463a75cb2d5553f8d1ea197323ccff/backbone-tutorial.html Full Code %}</p>

<pre><code>var AppView = Backbone.View.extend({
  // el - stands for element. Every view has a element associate in with HTML content will be rendered.
  el: '#container',
  // It's the first function called when this view it's instantiated.
  initialize: function(){
    this.render();
  },
  // $el - it's a cached jQuery object (el), in which you can use jQuery functions to push content. Like the Hello World in this case.
  render: function(){
    this.$el.html("Hello World");
  }
});
</code></pre>

<p>{% endcodeblock %}</p>

<p><strong>1.3.- Test the app</strong></p>

<p>After copying the code, open the file, refresh the browser and you should see the 'Hello World' message… right? Wait, if you just seeing just 'Loading…' it's because you need to initialize the view first.</p>

<p><code>var appView = new AppView();</code></p>

<p>Yay! you have your Hello Wold in Backbone and intro to the View module. (Full code it's <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/0bf69185f4463a75cb2d5553f8d1ea197323ccff/backbone-tutorial.html">here</a>)</p>

<p><strong>1.4.- Backbone's Templates</strong></p>

<p>Backbones has a utility/helper library called <a href="http://underscorejs.org/?utm_source=adrianmejia.com">underscore.js</a> and you can use their template solution out-of-the-box, but you can use any other template solution that you want like <a href="https://github.com/janl/mustache.js">mustage</a> or <a href="https://github.com/wycats/handlebars.js">handlerbars</a>. Let's stick with _.js's template for simplicity sake.</p>

<p>Underscore.js template has the following signature:</p>

<p><code>_.template(templateString, [data], [settings])</code></p>

<p>where in the <code>templateString</code> you use the place holder <code>&lt;%= %&gt;</code> and <code>&lt;%- %&gt;</code> to substitute them with data. The later does HTML escape while the first one doesn't. Moreover, you can use <code>&lt;% %&gt;</code> to run any javascript code.</p>

<p>Let’s see it in action and rewrite our Hello World using template instead.</p>

<p>{% codeblock Simple Backbone.View and Templates lang:js https://raw.github.com/amejiarosario/Backbone-tutorial/c5b131278ecde92f33882c9a2c22ee4119e57d77/backbone-tutorial.html Full Code %}</p>

<pre><code>var AppView = Backbone.View.extend({
  el: $('#container'),
  // template which has the placeholder 'who' to be substitute later 
  template: _.template("&lt;h3&gt;Hello &lt;%= who %&gt;&lt;h3&gt;"),
  initialize: function(){
    this.render();
  },
  render: function(){
    // render the function using substituting the varible 'who' for 'world!'. 
    this.$el.html(this.template({who: 'world!'}));
    //***Try putting your name instead of world.
  }
});

var appView = new AppView();
</code></pre>

<p>{% endcodeblock %}</p>

<p>Run the app again and verify that it's working with the template.</p>

<h3>Continue with the <a href="/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2/">2nd part</a> and learn more about backbones' Models, Collections, View and Events!</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git+ftp: Publish Git repository over FTP ]]></title>
    <link href="http://adrianmejia.com/blog/2011/11/09/gitftp-publish-git-repository-over-ftp/"/>
    <updated>2011-11-09T00:00:00-05:00</updated>
    <id>http://adrianmejia.com/blog/2011/11/09/gitftp-publish-git-repository-over-ftp</id>
    <content type="html"><![CDATA[<p>I have been working with websites for a while and also with different web hosts. The default way to upload content is through FTP but it takes a lot of time because upload the entire site each time. Some web hosts &nbsp;have ssh and git, which is great for deployement because you can keep track of the versions and also upload only the files that changes.</p>


<div>
    &nbsp;</div>


<div>
    In order to use git for local development and ftp (for hosting that doesn&#39;t support git/ssh) there are some options:</div>


<div>
    &nbsp;</div>


<div>
    <a href="https://github.com/resmo/git-ftp">https://github.com/resmo/git-ftp</a> - Git powered FTP client written as shell script.</div>


<div>
    <a href="https://github.com/ezyang/git-ftp">https://github.com/ezyang/git-ftp</a> - A quick and efficient way of pushing changed files to a website via FTP using python.</div>


<div>
    &nbsp;</div>


<div>
    I have use ezyang/git-ftp to deploy my drupal websites with good results.</div>


<div>
    &nbsp;</div>


<div>
    1. Install &#39;git-python&#39; first from <a href="http://gitorious.org/git-python">http://gitorious.org/git-python</a> -or- using `easy_install gitpython`</div>


<div>
    2. git clone <a href="https://github.com/ezyang/git-ftp.git">https://github.com/ezyang/git-ftp.git</a></div>


<div>
    3. You can create an alias for easy access in `~/.bash_profile` such as `alias git-ftp=&quot;python ~/git-ftp/git-ftp.py &quot;`</div>


<div>
    4. Just run the command `python ~/git-ftp/git-ftp.py ` where is your git repository that you want to upload. I will prompt all the ftp details and also will create the config file for you.</div>


<div>
    &nbsp;</div>


<div>
    You might want to setup files to ignore. If you are using drupal you should create a .gitignore file with a content similar to this:</div>


<div>
    &nbsp;</div>


<div>
    <pre>
.DS_Store*


# Ignore configuration files that may contain sensitive information.

sites/*/settings*.php


# Ignore paths that contain user-generated content.

sites/*/files

sites/*/private</pre>
</div>


<div>
    &nbsp;</div>

]]></content>
  </entry>
  
</feed>
